<div class="container-fluid home-page">

	{{
		home/connection-manager 
		connected=model.pEngine.connected 
		refreshRate=model.pEngine.refreshRate
		disconnect="disconnect" 
		connect="connect"
	}}

	<div class="row">

		{{! ----------------------------------------------------------------------- }}
		{{! 							Home sidebar section 						}}
		{{! ----------------------------------------------------------------------- }}
		<div class="col-sm-4 left-sidebar">
			<div class="left-sidebar-content">

				{{! Engine commands }}
				<div class="command-section">
					<h5>Commands</h5>
					<small>You can change the engine state in this section.</small>

					<div class="commands">

						{{
							home/state-button 
							currentState=(if model.pEngine.connected "running" "stopped")
							statesColor=model.statesColorEngine
							text="pEngine is"
							onClick="closeEngine"
						}}

						{{
							home/state-button 
							currentState=(if model.pEngine.connected model.pEngine.rawData.graphicsThread.state "stopped")
							text="Graphics loop"
							onClick="pauseGraphics"
						}}

						{{
							home/state-button 
							currentState=(if model.pEngine.connected model.pEngine.rawData.physicsThread.state "stopped")
							text="Physics loop"
							onClick="pausePhysics"
						}}

						{{
							home/state-button 
							currentState=(if model.pEngine.connected model.pEngine.rawData.inputThread.state "stopped")
							text="Input loop"
							onClick="pauseInput"
						}}

					</div>
				</div>

				{{! Engine general informations }}
				{{#each model.sideInformations as |table|}}
					<div class="stats">
						<table class="table table-sm">
							<thead>
								<tr>
									<th colspan="2">{{table.title}}</th>
								</tr>
							</thead>
							<tbody>
								{{#each table.data as |row|}}
									<tr>
										<th scope="row">{{row.name}}</th>
										<td>{{row.value}}</td>
									</tr>
								{{/each}}
							</tbody>
						</table>
					</div>
				{{/each}}

			</div>

		</div>

		{{! ----------------------------------------------------------------------- }}
		{{! 								Home content							}}
		{{! ----------------------------------------------------------------------- }}
		<div class="col-sm-4 content">

			{{! Graphics time chart }}
			<div class="title">
				<h4>Graphics loop</h4>
				<small>You can change the engine state in this section.</small>
			</div>
			
			{{
				charts/timed-area
				height=200
				timeRange=model.pEngine.cacheSize
				frequency=model.pEngine.refreshRate
				color=(home/state-color-converter "#C28AD1" model.pEngine.connected model.pEngine.rawData.graphicsThread.state)
				currentTime=model.currentTime
				data=(home/thread-chart-converter model.pEngine.rawData.graphicsThread.frames)
			}}

			<br>

			{{! Physics time chart }}
			<div class="title">
				<h4>Physics loop</h4>
				<small>You can change the engine state in this section.</small>
			</div>
			
			{{
				charts/timed-area
				height=200
				timeRange=model.pEngine.cacheSize
				frequency=model.pEngine.refreshRate
				color=(home/state-color-converter "#8ACDD1" model.pEngine.connected model.pEngine.rawData.physicsThread.state)
				currentTime=model.currentTime
				data=(home/thread-chart-converter model.pEngine.rawData.physicsThread.frames)
			}}

			<br>

			{{! Input time chart }}
			<div class="title">
				<h4>Input loop</h4>
				<small>You can change the engine state in this section.</small>
			</div>
			
			{{
				charts/timed-area
				height=200
				timeRange=model.pEngine.cacheSize
				frequency=model.pEngine.refreshRate
				color=(home/state-color-converter "#5CC970" model.pEngine.connected model.pEngine.rawData.inputThread.state)
				currentTime=model.currentTime
				data=(home/thread-chart-converter model.pEngine.rawData.inputThread.frames)
			}}

			<br>
			<br>

		</div>

	</div>

</div>